#!/usr/bin/env python3
"""
Debug script to test PDF generation in Docker container
Run this script inside your container to diagnose issues
"""

import os
import sys
import subprocess
import tempfile
from pathlib import Path

def check_system_dependencies():
    """Check if required system packages are installed"""
    print("=== Checking System Dependencies ===")
    
    required_packages = [
        'libcairo2',
        'libpango-1.0-0',
        'libpangocairo-1.0-0',
        'libgdk-pixbuf2.0-0',
        'fontconfig',
        'fonts-dejavu-core'
    ]
    
    for package in required_packages:
        try:
            result = subprocess.run(
                ['dpkg', '-l', package], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            if result.returncode == 0:
                print(f"✓ {package}: Installed")
            else:
                print(f"✗ {package}: Not installed")
        except Exception as e:
            print(f"✗ {package}: Error checking - {e}")

def check_fonts():
    """Check available fonts"""
    print("\n=== Checking Available Fonts ===")
    
    try:
        result = subprocess.run(
            ['fc-list'], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        if result.returncode == 0:
            fonts = result.stdout.strip().split('\n')
            print(f"Found {len(fonts)} fonts")
            
            # Look for common fonts
            common_fonts = ['DejaVu', 'Liberation', 'Arial', 'Helvetica']
            for font_family in common_fonts:
                matching = [f for f in fonts if font_family.lower() in f.lower()]
                if matching:
                    print(f"✓ {font_family}: {len(matching)} variants")
                    # Show first variant
                    print(f"  Example: {matching[0][:80]}...")
                else:
                    print(f"✗ {font_family}: Not found")
        else:
            print("✗ fc-list command failed")
            
    except Exception as e:
        print(f"✗ Error checking fonts: {e}")

def check_python_packages():
    """Check Python PDF generation packages"""
    print("\n=== Checking Python Packages ===")
    
    packages_to_check = {
        'weasyprint': 'WeasyPrint',
        'reportlab': 'ReportLab',
        'cairocffi': 'Cairo FFI',
        'cffi': 'CFFI',
        'fonttools': 'Font Tools',
        'PIL': 'Pillow'
    }
    
    for package, name in packages_to_check.items():
        try:
            __import__(package)
            print(f"✓ {name}: Available")
        except ImportError:
            print(f"✗ {name}: Not installed")

def test_weasyprint():
    """Test WeasyPrint PDF generation"""
    print("\n=== Testing WeasyPrint ===")
    
    try:
        from weasyprint import HTML, CSS
        from weasyprint.text.fonts import FontConfiguration
        
        print("✓ WeasyPrint imports successful")
        
        # Test simple HTML
        simple_html = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: 'DejaVu Sans', Arial, sans-serif; }
                .test { border: 1px solid black; padding: 20px; }
            </style>
        </head>
        <body>
            <div class="test">
                <h1>WeasyPrint Test</h1>
                <p>This is a test PDF generated by WeasyPrint.</p>
                <p>Font test: Arial, DejaVu Sans, Liberation Sans</p>
            </div>
        </body>
        </html>
        """
        
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp_file:
            try:
                font_config = FontConfiguration()
                HTML(string=simple_html).write_pdf(
                    tmp_file.name,
                    font_config=font_config
                )
                
                file_size = os.path.getsize(tmp_file.name)
                print(f"✓ Simple PDF generated successfully ({file_size} bytes)")
                
                # Clean up
                os.unlink(tmp_file.name)
                
            except Exception as e:
                print(f"✗ PDF generation failed: {e}")
                if os.path.exists(tmp_file.name):
                    os.unlink(tmp_file.name)
                
    except Exception as e:
        print(f"✗ WeasyPrint test failed: {e}")

def test_complex_layout():
    """Test complex payslip-like layout"""
    print("\n=== Testing Complex Layout ===")
    
    try:
        from weasyprint import HTML
        
        complex_html = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                @page { size: A4; margin: 8mm; }
                body { 
                    font-family: 'DejaVu Sans', Arial, sans-serif; 
                    font-size: 10px; 
                    margin: 0; 
                    padding: 0; 
                }
                .payslip {
                    border: 2px solid black;
                    padding: 10mm;
                    margin-bottom: 10mm;
                    page-break-inside: avoid;
                }
                .header { text-align: center; border-bottom: 1px solid black; padding-bottom: 5mm; }
                .employee-info { 
                    display: flex; 
                    justify-content: space-between; 
                    margin: 5mm 0; 
                }
                .left-info, .right-info { width: 48%; }
                .salary-details { 
                    display: flex; 
                    justify-content: space-between; 
                    margin: 5mm 0; 
                }
                .earnings, .deductions { width: 48%; }
                table { width: 100%; border-collapse: collapse; }
                td { border: 1px solid #ccc; padding: 2mm; font-size: 8px; }
                .net-salary { 
                    text-align: center; 
                    border: 2px solid black; 
                    padding: 5mm; 
                    margin: 5mm 0; 
                }
            </style>
        </head>
        <body>
            <div class="payslip">
                <div class="header">
                    <h2>SSPL CONSTRUCTIONS PVT LTD</h2>
                    <p>PAYSLIP FOR AUG 2025</p>
                </div>
                
                <div class="employee-info">
                    <div class="left-info">
                        <p><strong>ID:</strong> 910001</p>
                        <p><strong>Name:</strong> TEST EMPLOYEE</p>
                    </div>
                    <div class="right-info">
                        <p><strong>Dept:</strong> IT</p>
                        <p><strong>Rate:</strong> ₹739.00</p>
                    </div>
                </div>
                
                <div class="salary-details">
                    <div class="earnings">
                        <h4>EARNINGS</h4>
                        <table>
                            <tr><td>Basic</td><td>₹14,041.00</td></tr>
                            <tr><td>TOTAL</td><td>₹14,041.00</td></tr>
                        </table>
                    </div>
                    <div class="deductions">
                        <h4>DEDUCTIONS</h4>
                        <table>
                            <tr><td>PF</td><td>₹1,684.92</td></tr>
                            <tr><td>TOTAL</td><td>₹1,684.92</td></tr>
                        </table>
                    </div>
                </div>
                
                <div class="net-salary">
                    <p><strong>NET SALARY: ₹12,356.08</strong></p>
                    <p>Twelve Thousand Three Hundred Fifty Six Only</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp_file:
            try:
                HTML(string=complex_html).write_pdf(tmp_file.name)
                
                file_size = os.path.getsize(tmp_file.name)
                print(f"✓ Complex layout PDF generated successfully ({file_size} bytes)")
                
                # Keep the file for inspection
                print(f"  PDF saved as: {tmp_file.name}")
                
            except Exception as e:
                print(f"✗ Complex layout PDF generation failed: {e}")
                if os.path.exists(tmp_file.name):
                    os.unlink(tmp_file.name)
                
    except Exception as e:
        print(f"✗ Complex layout test failed: {e}")

def check_file_permissions():
    """Check file system permissions"""
    print("\n=== Checking File Permissions ===")
    
    test_dirs = ['/tmp', '/app', '/app/temp']
    
    for test_dir in test_dirs:
        if os.path.exists(test_dir):
            if os.access(test_dir, os.W_OK):
                print(f"✓ {test_dir}: Writable")
                
                # Test file creation
                try:
                    test_file = os.path.join(test_dir, 'test_write.tmp')
                    with open(test_file, 'w') as f:
                        f.write('test')
                    os.unlink(test_file)
                    print(f"  ✓ File creation test passed")
                except Exception as e:
                    print(f"  ✗ File creation test failed: {e}")
            else:
                print(f"✗ {test_dir}: Not writable")
        else:
            print(f"✗ {test_dir}: Does not exist")

def main():
    """Run all diagnostic tests"""
    print("PDF Generation Diagnostic Tool")
    print("=" * 50)
    
    check_system_dependencies()
    check_fonts()
    check_python_packages()
    check_file_permissions()
    test_weasyprint()
    test_complex_layout()
    
    print("\n=== Summary ===")
    print("If all tests pass, PDF generation should work correctly.")
    print("If tests fail, check the Docker container setup and dependencies.")

if __name__ == "__main__":
    main()


